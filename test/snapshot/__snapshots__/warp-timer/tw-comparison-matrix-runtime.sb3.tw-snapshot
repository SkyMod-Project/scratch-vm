// TW Snapshot
// Input SHA-256: 698b7a46d7ae7b0ea802888a6515a629f9a13721cae399629902031b0aa9c633

// Sprite1 script
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
return function* genXYZ () {
yield* executeInCompatibilityLayer({"MESSAGE":"plan 0",}, b0, false, false, "ae", null);
yield* thread.procedures["Wrun test"]();
yield* executeInCompatibilityLayer({"MESSAGE":"end",}, b0, false, false, "aZ", null);
retire(); return;
}; })

// Sprite1 run test
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = stage.variables["mfV;yS}9e:%h5UZ)QyiY"];
const b1 = stage.variables["`jEk@4|i[#Fk?(8x)AV.-my variable"];
const b2 = stage.variables["n^wm8jw#b24sggt.S^tD"];
const b3 = stage.variables["_]6^lq+-%H0{ov`tKt7$"];
const b4 = stage.variables["3lyKRepBc$tx)EWlpr!y"];
const b5 = runtime.getOpcodeFunction("looks_say");
return function* genXYZ_run_test () {
thread.procedures["Wsetup values"]();
b0.value = 0;
b1.value = 0;
for (var a0 = b2.value.length; a0 >= 0.5; a0--) {
b1.value = ((+b1.value || 0) + 1);
b3.value = 0;
for (var a1 = b2.value.length; a1 >= 0.5; a1--) {
b3.value = ((+b3.value || 0) + 1);
b0.value = ((+b0.value || 0) + 1);
if (!compareEqual(compareGreaterThan(listGet(b2.value, b1.value), (b2.value[((b3.value || 0) | 0) - 1] ?? "")), (b4.value[((b0.value || 0) | 0) - 1] ?? ""))) {
yield* executeInCompatibilityLayer({"MESSAGE":("fail " + (("" + listGet(b2.value, b1.value)) + (" should be > " + ("" + listGet(b2.value, b3.value))))),}, b5, true, false, "]", null);
}
b0.value = ((+b0.value || 0) + 1);
if (!compareEqual(compareEqual(listGet(b2.value, b1.value), listGet(b2.value, b3.value)), (b4.value[((b0.value || 0) | 0) - 1] ?? ""))) {
yield* executeInCompatibilityLayer({"MESSAGE":("fail " + (("" + listGet(b2.value, b1.value)) + (" should be = " + ("" + listGet(b2.value, b3.value))))),}, b5, true, false, "|", null);
}
b0.value = ((+b0.value || 0) + 1);
if (!compareEqual(compareLessThan(listGet(b2.value, b1.value), listGet(b2.value, b3.value)), (b4.value[((b0.value || 0) | 0) - 1] ?? ""))) {
yield* executeInCompatibilityLayer({"MESSAGE":("fail " + (("" + listGet(b2.value, b1.value)) + (" should be < " + ("" + listGet(b2.value, b3.value))))),}, b5, true, true, "ab", null);
if (hasResumedFromPromise) {hasResumedFromPromise = false;continue;}
}
if (isStuck()) yield;
}
if (isStuck()) yield;
}
return "";
}; })

// Sprite1 setup values
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = stage.variables["n^wm8jw#b24sggt.S^tD"];
return function funXYZ_setup_values () {
b0.value = [];
b0.value.push(0);
b0._monitorUpToDate = false;
b0.value.push(1);
b0._monitorUpToDate = false;
b0.value.push(2);
b0._monitorUpToDate = false;
b0.value.push(-1);
b0._monitorUpToDate = false;
b0.value.push(-2);
b0._monitorUpToDate = false;
b0.value.push("0.0");
b0._monitorUpToDate = false;
b0.value.push("-0.");
b0._monitorUpToDate = false;
b0.value.push("-0.0");
b0._monitorUpToDate = false;
b0.value.push(".123");
b0._monitorUpToDate = false;
b0.value.push("-.123");
b0._monitorUpToDate = false;
b0.value.push("1.");
b0._monitorUpToDate = false;
b0.value.push((0 + 0));
b0._monitorUpToDate = false;
b0.value.push((1 + 0));
b0._monitorUpToDate = false;
b0.value.push((2 + 0));
b0._monitorUpToDate = false;
b0.value.push((-1 + 0));
b0._monitorUpToDate = false;
b0.value.push((-2 + 0));
b0._monitorUpToDate = false;
b0.value.push((0.123 + 0));
b0._monitorUpToDate = false;
b0.value.push((-0.123 + 0));
b0._monitorUpToDate = false;
b0.value.push((1 + 0));
b0._monitorUpToDate = false;
b0.value.push("1e99");
b0._monitorUpToDate = false;
b0.value.push((1e+99 + 0));
b0._monitorUpToDate = false;
b0.value.push(Infinity);
b0._monitorUpToDate = false;
b0.value.push(-Infinity);
b0._monitorUpToDate = false;
b0.value.push("-infinitY");
b0._monitorUpToDate = false;
b0.value.push((1 / 0));
b0._monitorUpToDate = false;
b0.value.push((-1 / 0));
b0._monitorUpToDate = false;
b0.value.push((0 / 0));
b0._monitorUpToDate = false;
b0.value.push(NaN);
b0._monitorUpToDate = false;
b0.value.push("nan");
b0._monitorUpToDate = false;
b0.value.push("-NaN");
b0._monitorUpToDate = false;
b0.value.push("true");
b0._monitorUpToDate = false;
b0.value.push("false");
b0._monitorUpToDate = false;
b0.value.push(!false);
b0._monitorUpToDate = false;
b0.value.push(!!false);
b0._monitorUpToDate = false;
b0.value.push("");
b0._monitorUpToDate = false;
b0.value.push("Banana");
b0._monitorUpToDate = false;
b0.value.push(" ");
b0._monitorUpToDate = false;
b0.value.push("ðŸŽ‰");
b0._monitorUpToDate = false;
return "";
}; })
